<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Serverless Notebook!</title>
		<link>https://imewish.github.io/posts/</link>
		<description>Recent content in Posts on Serverless Notebook!</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Tue, 01 Sep 2020 18:30:00 +0000</lastBuildDate>
		<atom:link href="https://imewish.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>DynamoDB CheatSheet For NodeJS/JavaScript</title>
			<link>https://imewish.github.io/posts/dynamodb-cheatsheet-for-nodejs-javascript/</link>
			<pubDate>Tue, 01 Sep 2020 18:30:00 +0000</pubDate>
			
			<guid>https://imewish.github.io/posts/dynamodb-cheatsheet-for-nodejs-javascript/</guid>
			<description>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database so that you don&amp;rsquo;t have to worry about hardware provisioning, setup, and configuration, replication, software patching, or cluster scaling. DynamoDB also offers encryption at rest, which eliminates the operational burden and complexity involved in protecting sensitive data.
This cheat sheet will cover the most commonly used scenarios of data operations in DynamoDB with AWS DynamoDB Document client for JavaScript/Nodejs.</description>
			<content type="html"><![CDATA[<p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database so that you don&rsquo;t have to worry about hardware provisioning, setup, and configuration, replication, software patching, or cluster scaling. DynamoDB also offers encryption at rest, which eliminates the operational burden and complexity involved in protecting sensitive data.</p>
<p>This cheat sheet will cover the most commonly used scenarios of data operations in DynamoDB with AWS DynamoDB Document client for JavaScript/Nodejs. The DynamoDB Document Client is the easiest and most preferred way to interact with a DynamoDB database from a Nodejs or JavaScript application.</p>
<h2 id="getting-started">GETTING STARTED</h2>
<h4 id="install">Install</h4>
<p><code>npm install aws-sdk</code></p>
<h4 id="configure">Configure</h4>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">AWS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;aws-sdk&#39;</span><span class="p">)</span>

<span class="kr">const</span> <span class="nx">ddb</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">DynamoDB</span><span class="p">.</span><span class="nx">DocumentClient</span><span class="p">()</span>
</code></pre></div><h4 id="create-item">CREATE ITEM</h4>
<p>Let&rsquo;s create a new item for the new user. This user will have one album and one image in the album.</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">async</span> <span class="kd">function</span> <span class="nx">createItem</span> <span class="p">(</span><span class="nx">buildInfo</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Creating new item&#39;</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">TableName</span><span class="o">:</span> <span class="nx">tableName</span><span class="p">,</span>
    <span class="nx">Item</span><span class="o">:</span> <span class="p">{</span>
      <span class="s1">&#39;userId&#39;</span><span class="o">:</span> <span class="s1">&#39;johnDoe&#39;</span><span class="p">,</span>
      <span class="s1">&#39;createdAt&#39;</span><span class="o">:</span> <span class="mi">1598362623</span><span class="p">,</span>
      <span class="s1">&#39;updatedAt&#39;</span><span class="o">:</span> <span class="mi">1598362623</span><span class="p">,</span>
      <span class="s1">&#39;albums&#39;</span><span class="o">:</span> <span class="p">{</span>
         <span class="s1">&#39;album1&#39;</span><span class="o">:</span> <span class="p">{</span>
            <span class="s1">&#39;id&#39;</span><span class="o">:</span> <span class="s1">&#39;album-kjuijhs342&#39;</span><span class="p">,</span>
            <span class="s1">&#39;createdAt&#39;</span><span class="o">:</span> <span class="mi">1598362623</span><span class="p">,</span>
            <span class="s1">&#39;updatedAt&#39;</span><span class="o">:</span> <span class="mi">1598362623</span><span class="p">,</span>
            <span class="s1">&#39;description&#39;</span><span class="o">:</span> <span class="s1">&#39;My First Album&#39;</span><span class="p">,</span>
            <span class="s1">&#39;Title&#39;</span><span class="o">:</span> <span class="s1">&#39;Holidays&#39;</span><span class="p">,</span>
            <span class="s1">&#39;images&#39;</span><span class="o">:</span> <span class="p">{</span>
               <span class="s1">&#39;img-1&#39;</span><span class="o">:</span> <span class="p">{</span>
                  <span class="s1">&#39;filename&#39;</span><span class="o">:</span> <span class="s1">&#39;johndoe/album1/e8TtkC5xyv4.jpg&#39;</span><span class="p">,</span>
                  <span class="s1">&#39;s3Url&#39;</span><span class="o">:</span> <span class="s1">&#39;s3://photo-bucket/johndoe/album1/e8TtkC5xyv4.jpg&#39;</span><span class="p">,</span>
                  <span class="s1">&#39;tags&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;nature&#39;</span><span class="p">,</span> <span class="s1">&#39;animals&#39;</span><span class="p">]</span>
                <span class="p">}</span>
            <span class="p">}</span>
         <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">await</span> <span class="nx">ddb</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="nx">params</span><span class="p">).</span><span class="nx">promise</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h4 id="scan">SCAN</h4>
<p>Scan and returns all items in a table</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">async</span> <span class="kd">function</span> <span class="nx">scan</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">TableName</span><span class="o">:</span> <span class="nx">tableName</span>
  <span class="p">}</span>

  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">ddb</span><span class="p">.</span><span class="nx">scan</span><span class="p">(</span><span class="nx">params</span><span class="p">).</span><span class="nx">promise</span><span class="p">()</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h4 id="get-item">GET ITEM</h4>
<p>Get a single item from the table</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">async</span> <span class="kd">function</span> <span class="nx">getItem</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">TableName</span><span class="o">:</span> <span class="nx">tableName</span><span class="p">,</span>
    <span class="nx">Key</span><span class="o">:</span> <span class="p">{</span>
      <span class="s1">&#39;userId&#39;</span><span class="o">:</span> <span class="s1">&#39;johnDoe&#39;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">ddb</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">params</span><span class="p">).</span><span class="nx">promise</span><span class="p">()</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div><h4 id="get-only-some-data-from-an-item">GET ONLY SOME DATA FROM AN ITEM</h4>
<p>this will return only the tags from img1 and img2 in the result.</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">async</span> <span class="kd">function</span> <span class="nx">getSome</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">TableName</span><span class="o">:</span> <span class="nx">tableName</span><span class="p">,</span>
    <span class="nx">ProjectionExpression</span><span class="o">:</span> <span class="sb">`albums.album1.images.#imageName1.tags, albums.album1.images.#imageName2.tags`</span><span class="p">,</span>
    <span class="nx">ExpressionAttributeNames</span><span class="o">:</span> <span class="p">{</span>
      <span class="s1">&#39;#imageName1&#39;</span><span class="o">:</span> <span class="s1">&#39;img-1&#39;</span><span class="p">,</span>
      <span class="s1">&#39;#imageName2&#39;</span><span class="o">:</span> <span class="s1">&#39;img-2&#39;</span>
    <span class="p">},</span>
    <span class="nx">Key</span><span class="o">:</span> <span class="p">{</span>
      <span class="s1">&#39;userId&#39;</span><span class="o">:</span> <span class="s1">&#39;johnDoe&#39;</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">ddb</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">params</span><span class="p">).</span><span class="nx">promise</span><span class="p">()</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">result</span><span class="p">))</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h4 id="delete-item">DELETE ITEM</h4>
<p>deletes a single item from the table</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">async</span> <span class="kd">function</span> <span class="nx">deleteItem</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">TableName</span><span class="o">:</span> <span class="nx">tableName</span><span class="p">,</span>
     <span class="nx">Key</span><span class="o">:</span> <span class="p">{</span>
       <span class="nx">userId</span><span class="o">:</span> <span class="s1">&#39;johnDoe&#39;</span><span class="p">,</span>
     <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">await</span> <span class="nx">ddb</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">params</span><span class="p">).</span><span class="nx">promise</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h4 id="query">QUERY</h4>
<p>Query an item from a table</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">async</span> <span class="kd">function</span> <span class="nx">query</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">TableName</span><span class="o">:</span> <span class="nx">tableName</span><span class="p">,</span>
    <span class="nx">KeyConditionExpression</span><span class="o">:</span> <span class="s1">&#39;userId = :id &#39;</span><span class="p">,</span>
    <span class="nx">ExpressionAttributeValues</span><span class="o">:</span> <span class="p">{</span> <span class="s1">&#39;:id&#39;</span><span class="o">:</span> <span class="s1">&#39;johnDoe&#39;</span> <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">ddb</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="nx">params</span><span class="p">).</span><span class="nx">promise</span><span class="p">()</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h4 id="update-a-top-level-attribute">UPDATE A TOP-LEVEL ATTRIBUTE</h4>
<p>Let&rsquo;s update the <code>updatedAt</code> key</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">async</span> <span class="kd">function</span> <span class="nx">updateItem</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">TableName</span><span class="o">:</span> <span class="nx">tableName</span><span class="p">,</span>
    <span class="nx">Key</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">userId</span><span class="o">:</span> <span class="s1">&#39;johnDoe&#39;</span>
    <span class="p">},</span>
    <span class="nx">UpdateExpression</span><span class="o">:</span> <span class="s1">&#39;set updatedAt = :newUpdatedAt&#39;</span><span class="p">,</span>
    <span class="nx">ExpressionAttributeValues</span><span class="o">:</span> <span class="p">{</span>
      <span class="s1">&#39;:newUpdatedAt&#39;</span><span class="o">:</span> <span class="mi">1598367687</span>
    <span class="p">},</span>
    <span class="nx">ReturnValues</span><span class="o">:</span> <span class="s1">&#39;UPDATED_NEW&#39;</span>
  <span class="p">}</span>

  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">await</span> <span class="nx">ddb</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">params</span><span class="p">).</span><span class="nx">promise</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h4 id="update-a-nested-attribute">UPDATE A NESTED ATTRIBUTE</h4>
<p>Here we will add a new attribute(size) to <code>img-1</code> of <code>album1</code></p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">async</span> <span class="kd">function</span> <span class="nx">updateNestedAttribute</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">TableName</span><span class="o">:</span> <span class="nx">tableName</span><span class="p">,</span>
    <span class="nx">Key</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">userId</span><span class="o">:</span> <span class="s1">&#39;johnDoe&#39;</span>
    <span class="p">},</span>
    <span class="nx">UpdateExpression</span><span class="o">:</span> <span class="sb">`set albums.album1.images.#img.size  = :newImage`</span><span class="p">,</span>
    <span class="nx">ConditionExpression</span><span class="o">:</span> <span class="sb">`attribute_not_exists(albums.album1.images.#img.size)`</span><span class="p">,</span> <span class="c1">// only creates if size attribute doestnt exists
</span><span class="c1"></span>    <span class="nx">ExpressionAttributeNames</span><span class="o">:</span> <span class="p">{</span>
      <span class="s1">&#39;#img&#39;</span><span class="o">:</span> <span class="s1">&#39;img-1&#39;</span>
    <span class="p">},</span>
    <span class="nx">ExpressionAttributeValues</span><span class="o">:</span> <span class="p">{</span>
      <span class="s1">&#39;:newImage&#39;</span><span class="o">:</span> <span class="mi">2048</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">await</span> <span class="nx">ddb</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">params</span><span class="p">).</span><span class="nx">promise</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><blockquote>
<p><strong>NOTE</strong>: If an attribute name begins with a number or contains a space, a special character, or a reserved word, then you must use an expression attribute name to replace that attribute&rsquo;s name in the expression. In the above example, <code>img-2</code> attribute has <code>-</code> in its name. So if we set the update expression to ``et albums.album1.images.image-2  = :newImage``it will throw an error.</p>
</blockquote>
<h4 id="append-to-a-nested-object">APPEND TO A NESTED OBJECT</h4>
<p>Here we will add a new image to album1</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">async</span> <span class="kd">function</span> <span class="nx">appendToAnObject</span> <span class="p">()</span> <span class="p">{</span>

  <span class="kd">let</span> <span class="nx">newImage</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;filename&#39;</span><span class="o">:</span> <span class="s1">&#39;johndoe/album1/food-826349.jpg&#39;</span><span class="p">,</span>
    <span class="s1">&#39;s3Url&#39;</span><span class="o">:</span> <span class="s1">&#39;s3://photo-bucket/johndoe/album1/food-826349.jpg&#39;</span><span class="p">,</span>
    <span class="s1">&#39;tags&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;burger&#39;</span><span class="p">,</span> <span class="s1">&#39;food&#39;</span><span class="p">]</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">TableName</span><span class="o">:</span> <span class="nx">tableName</span><span class="p">,</span>
    <span class="nx">Key</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">userId</span><span class="o">:</span> <span class="s1">&#39;johnDoe&#39;</span>
    <span class="p">},</span>
    <span class="nx">UpdateExpression</span><span class="o">:</span> <span class="sb">`set albums.album1.images.#image  = :newImage`</span><span class="p">,</span>
    <span class="nx">ExpressionAttributeNames</span><span class="o">:</span> <span class="p">{</span>
      <span class="s1">&#39;#image&#39;</span><span class="o">:</span> <span class="s1">&#39;img-2&#39;</span>
    <span class="p">},</span>
    <span class="nx">ExpressionAttributeValues</span><span class="o">:</span> <span class="p">{</span>
      <span class="s1">&#39;:newImage&#39;</span><span class="o">:</span> <span class="nx">newImage</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">await</span> <span class="nx">ddb</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">params</span><span class="p">).</span><span class="nx">promise</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h4 id="append-to-a-list">APPEND TO A LIST</h4>
<p>Here we will add a couple of tags to one of the image. Tags are stored as an array</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">async</span> <span class="kd">function</span> <span class="nx">appendToList</span><span class="p">()</span> <span class="p">{</span>

  <span class="kd">let</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">TableName</span><span class="o">:</span> <span class="nx">tableName</span><span class="p">,</span>
    <span class="nx">Key</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">userId</span><span class="o">:</span> <span class="s1">&#39;johnDoe&#39;</span>
    <span class="p">},</span>
    <span class="nx">UpdateExpression</span><span class="o">:</span> <span class="s1">&#39;SET albums.album1.images.#image1.tags = list_append(albums.album1.images.#image1.tags, :newTags)&#39;</span><span class="p">,</span>
    <span class="nx">ExpressionAttributeNames</span><span class="o">:</span> <span class="p">{</span>
      <span class="s1">&#39;#image1&#39;</span><span class="o">:</span> <span class="s1">&#39;img-1&#39;</span>
    <span class="p">},</span>
    <span class="nx">ExpressionAttributeValues</span><span class="o">:</span> <span class="p">{</span>
      <span class="s1">&#39;:newTags&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;burger&#39;</span><span class="p">,</span> <span class="s1">&#39;pizza&#39;</span><span class="p">]</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">await</span> <span class="nx">ddb</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">params</span><span class="p">).</span><span class="nx">promise</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Load Testing Serverless Applications With Serverless Artillery</title>
			<link>https://imewish.github.io/posts/load-testing-serverless-sls-artillery/</link>
			<pubDate>Mon, 13 Apr 2020 18:30:00 +0000</pubDate>
			
			<guid>https://imewish.github.io/posts/load-testing-serverless-sls-artillery/</guid>
			<description>Load testing is an important part when you are designing any type of application, whether it is traditional EC2 based or container-based or a complete serverless application.
Why is Load Testing important? Load testing will help us to find the following
- How fast is the system
- How much load can the system handle
- Under what conditions will the system fail
- Determine our application’s capabilities by measuring its response time, throughput, CPU utilization, latency, etc.</description>
			<content type="html"><![CDATA[<p>Load testing is an important part when you are designing any type of application, whether it is traditional EC2 based or container-based or a complete serverless application.</p>
<h3 id="_why-is-load-testing-important_"><strong><em>Why is Load Testing important?</em></strong></h3>
<p>Load testing will help us to find the following</p>
<p>- How fast is the system</p>
<p>- How much load can the system handle</p>
<p>- Under what conditions will the system fail</p>
<p>- Determine our application’s capabilities by measuring its response time, throughput, CPU utilization, latency, etc. during average and heavy user load. This will eventually help in determining the infrastructure needs as the system scales upward.</p>
<p>- It gives us an opportunity to find strange behavior or surprises when we subject an application to an insane amount of load (stress testing). Strange behaviors include request timeouts, IO Exceptions, memory leaks, or any security issues.</p>
<h3 id="choosing-a-load-testing-tool-or-framework"><strong>Choosing a Load testing tool or framework</strong></h3>
<p>There are many great load testing frameworks available. Some of the leading tools are,</p>
<p>- Jmeter</p>
<p>- Locust</p>
<p>- Artillery.io</p>
<p>Each of the above tools provides common and some additional features and different methods of load testing. But the only problem with these tools is the throughput it can generate towards your application is limited to the host systems&rsquo; memory and CPU capacity. If you want to want to test high and quick traffic ramp-up scenarios it&rsquo;s not possible to do it from your laptop or PC. You can either have a high-end PC or you can run it on a Cloud Virtual Machine, it can be expensive, plus some of the above tools come with a GUI, which cannot be accessed via VM&rsquo;s.</p>
<p>So how can we do load tests <strong>at scale</strong> without having a high-end testing infrastructure?</p>
<p><img src="/static/uploads/modern-problems-require-5c6590-1.jpg" alt=""></p>
<h3 id="load-testing-serverless-applications-with-serverless-artillery">Load Testing Serverless Applications with Serverless Artillery</h3>
<p>Serverless artillery is a combination of <strong><em>serverless</em></strong> framework and <strong><em>artillery.io</em></strong></p>
<p><strong><em>Combine serverless with artillery and you get serverless-artillery for an instant, cheap, and easy performance testing at scale</em></strong></p>
<p>Serverless-artillery makes it easy to test your services for performance and functionality quickly, easily, and without having to maintain any servers or testing infrastructure.</p>
<h3 id="use-serverless-artillery-if"><strong>Use serverless-artillery if</strong></h3>
<p>1. You want to know if your services (either internal or public) can handle different amounts of traffic load (i.e. performance or load testing).</p>
<p>2. You want to test if your services behave as you expect after you deploy new changes (i.e. acceptance testing).</p>
<p>3. You want to constantly monitor your services overtime to make sure the latency of your services is under control (i.e. monitoring mode).</p>
<h4 id="how-it-works"><strong>How It Works</strong></h4>
<p><img src="/uploads/howitworks-1.jpg" alt=""></p>
<p><img src="/uploads/architecture-1.gif" alt=""></p>
<p>- Serverless-artillery would be installed and run on your local machine. From the command line run <code>slsart --help</code> to see various serverless-artillery commands</p>
<p>- It takes your JSON or YAML load script `script.yml` that specifies,</p>
<pre><code>- test target/URL/endpoint/service

- load progression

- and the scenarios that are important for your service to test.
</code></pre>
<h3 id="lets-see-it-in-action">Let&rsquo;s See It in Action</h3>
<p>*<em>Load Testing A Sample Application</em>*</p>
<p>In this example, we will load test a single endpoint(GET) serverless API built with <strong>AWS API Gateway, Lambda, and DynamoDB</strong></p>
<p>*<em>Installing Serverless Artillery on local machine</em>*</p>
<p>*<em>Prerequisite</em>*</p>
<p>- NodeJS v8 +</p>
<p>- Serverless Framework CLI</p>
<pre><code>npm install -g serverless
</code></pre>
<p><strong><em>Installing serverless-artillery</em></strong></p>
<pre><code>npm install -g serverless-artillery
</code></pre>
<p>To check that the installation succeeded, run:</p>
<pre><code>slsart --version
</code></pre>
<p>We can also install it on a [docker container](<a href="https://github.com/Nordstrom/serverless-artillery#installing-in-docker" title="https://github.com/Nordstrom/serverless-artillery#installing-in-docker">https://github.com/Nordstrom/serverless-artillery#installing-in-docker</a>)</p>
<p>*<em>Setting up the Load Test Configuration</em>*</p>
<pre><code>mkdir load-test

cd load-test

slsart script // this will create script.yml

config:
  target: &quot;https://xxxxxxx.execute-api.us-east-1.amazonaws.com&quot;
  phases:
    -
      duration: 300
      arrivalRate: 500
      rampTo: 10000
scenarios:
  -
    flow:
      -
        get:
          url: &quot;/dev/get?id=john&quot;
</code></pre>
<p>Understanding `script.yml`</p>
<p><strong><em>config</em></strong><em>:</em></p>
<p>The config section defines the target (the hostname or IP address of the system under test),the load progression, and protocol-specific settings such as HTTP response timeouts or [Socket.io](<a href="http://socket.io/" title="http://socket.io/">http://socket.io/</a>) transport options</p>
<p><strong><em>target</em></strong>:</p>
<p>the URI of the application under test. For an HTTP application, it&rsquo;s the base URL for all requests</p>
<p><strong>phases</strong>:</p>
<p>specify the duration of the test and the frequency of requests</p>
<p><strong>scenarios</strong>:</p>
<p>The scenarios section contains definitions for one or more scenarios for the virtual users that Artillery will create.</p>
<p><strong>flow:</strong></p>
<p>a &ldquo;flow&rdquo; is an array of operations that a virtual user performs, e.g. GET and POST requests for an HTTP-based application</p>
<p>*<em>Deploy to AWS</em>*</p>
<pre><code>slsart deploy --stage &lt;your-unique-stage-name&gt;
</code></pre>
<p><strong><em>Start the load Test</em></strong></p>
<pre><code>slsart invoke --stage &lt;your-unique-stage-name&gt;
</code></pre>
<p><strong><em>The above &ldquo;script.yml&rdquo; will try to generate 500 user request/second  towards the API Gateway Endpoint and it will try to ramp up the requests to 10000/RPS in a period of 5 minutes</em></strong></p>
<p>And the result of the test will look like this in a cloud watch dashboard.</p>
<p><img src="/uploads/cw-graph.png" alt=""></p>
<p>As we can see in the above graph, there are a lot of requests that were throttled by lambda. That is because of lambda&rsquo;s concurrency limit of 1000.</p>
<h3 id="how-load-testing-helps-serverless-applications">How Load Testing Helps Serverless Applications</h3>
<p>One of the important insights we can get from load testing serverless applications is, It helps to find out the default soft limits or hidden limits of serverless tools. By knowing this we will be able to architecture our application to handle high traffic without throttling the request and hitting the AWS limits.</p>
<p>It also helps to find out the following things,</p>
<p>- Lambda Insights</p>
<pre><code>- To find concurrency limits

- To find out the timeouts

- To find out Memory Exceptions

- To find out Cold starts (You can warm up or add provisioned concurrency to those functions)
</code></pre>
<p>- API Gateway</p>
<pre><code>- To understand the request throttling limits, increase or decrease them according to application needs
</code></pre>
<p>- DynamoDB</p>
<pre><code>- To get the read write usage metrics and do capacity planning  for handling different level of traffic</code></pre>
]]></content>
		</item>
		
		<item>
			<title>URL redirects with AWS S3 and Cloudfront</title>
			<link>https://imewish.github.io/posts/2019-12-15-url-redirects-with-aws-s3-and-cloudfront/</link>
			<pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://imewish.github.io/posts/2019-12-15-url-redirects-with-aws-s3-and-cloudfront/</guid>
			<description>Hosting a static website with S3 is awesome! It is Faster, Cheaper, Zero maintenance.
In this article, we will see how to do URL redirects on a website hosted with AWS S3 and Cloudfront.
There was a scenario which I was faced once in my company, One of our websites had deleted some old content and replaced it with new content and URL. And when people who google search for that particular content they get the old URL which doest exists.</description>
			<content type="html"><![CDATA[<p>Hosting a static website with S3 is awesome! It is Faster, Cheaper, Zero maintenance.</p>
<p>In this article, we will see how to do URL redirects on a website hosted with AWS S3 and Cloudfront.</p>
<p>There was a scenario which I was faced once in my company, One of our websites had deleted some old content and replaced it with new content and URL. And when people who google search for that particular content they get the old URL which doest exists.</p>
<p>To fix this issue the approach we had was to do add a temporary redirect for that old URL to the new one until it gets updated at google search.</p>
<p><strong>The Fix</strong></p>
<p>AWS S3 Static hosting provides an option to add redirection rules to the website hosted in a particular bucket. <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html" title="https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html">https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html</a></p>
<p><img src="/assets/images/staticwebsitehosting30.png" alt=""></p>
<p>In this particular case, the URL&rsquo;s we are going to use will be these,</p>
<p><strong>_<a href="https://example.com/content/old-content_">https://example.com/content/old-content_</a></strong></p>
<p>and we will be redirecting this to</p>
<p><strong>_<a href="https://example.com/content/new/content_">https://example.com/content/new/content_</a></strong></p>
<p>To add the rules,</p>
<ol>
<li>Click on your bucket</li>
<li>Go to properties and click on static website hosting</li>
<li>Under the redirection rules filed, put the following code</li>
</ol>
<p>Redirect Rule,</p>
<pre><code>&lt;RoutingRules&gt;
  &lt;RoutingRule&gt;
    &lt;Condition&gt;
      &lt;KeyPrefixEquals&gt;content/old-content/&lt;/KeyPrefixEquals&gt;
    &lt;/Condition&gt;
    &lt;Redirect&gt;
      &lt;HostName&gt;example.com&lt;/HostName&gt;
&lt;ReplaceKeyPrefixWith&gt;content/new/content&lt;/ReplaceKeyPrefixWith&gt;
    &lt;/Redirect&gt;
  &lt;/RoutingRule&gt;
&lt;/RoutingRules&gt;
</code></pre>
<p>Please note, The <strong>HostName(<strong>Line 7</strong>)</strong> part is important if your S3 website is configured with <strong>Cloudfront.</strong> Else during redirect, the domain name will be replaced with the S3 website endpoint.</p>
<p>That&rsquo;s it. Now any requests coming to the old URL will be automatically redirected to the new one</p>
]]></content>
		</item>
		
		<item>
			<title>Automating Deployment Of Lambda Functions Using Serverless Framework, AWS CodePipeline</title>
			<link>https://imewish.github.io/posts/2019-11-23-automating-deployment-of-lambda-functions-using-serverless-framework-aws-codepipeline/</link>
			<pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://imewish.github.io/posts/2019-11-23-automating-deployment-of-lambda-functions-using-serverless-framework-aws-codepipeline/</guid>
			<description>In this guide we will set up a very simple REST API endpoint with the serverless framework, AWS Lambda, and API Gateway and deploy it to AWS Lambda with Github, AWS Codepipeline, Codebuild
1. Install the Serverless Framework npm install serverless -g 2. Create a project serverless create --template aws-nodejs --path serverless-nodejs-api This will create two files handler.js and serveless.yml
&#39;use strict&#39;; module.exports.api = async event =&amp;gt; { return { statusCode: 200, body: JSON.</description>
			<content type="html"><![CDATA[<p><em>In this guide we will set up a very simple REST API endpoint with the serverless framework, AWS Lambda, and API Gateway and deploy it to AWS Lambda with Github, AWS Codepipeline, Codebuild</em></p>
<h2 id="1-install-the-serverless-framework">1. Install the Serverless Framework</h2>
<pre><code>npm install serverless -g
</code></pre><h2 id="2-create-a-project">2. Create a project</h2>
<pre><code>serverless create --template aws-nodejs --path serverless-nodejs-api
</code></pre><p>This will create two files <code>handler.js</code> and <code>serveless.yml</code></p>
<pre><code>'use strict';

module.exports.api = async event =&gt; {
  return {
    statusCode: 200,
    body: JSON.stringify(
      {
        message: 'Go Serverless v1.0! Your function executed successfully!'
      },
      null,
      2
    ),
  };
};
</code></pre><p>Update your serverless.yml to add an API Gateway endpoint.</p>
<pre><code>service: serverless-nodejs-api

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev

functions:
  getMsg:
    handler: handler.api
    events:
      - http: GET /
</code></pre><p>Now we have our serverless API code ready.</p>
<p>You can deploy this to AWS manually by running <code>sls deploy --stage dev</code></p>
<p>This will deploy the lambda function and create an API gateway endpoint for the function.</p>
<p>Once deployed, the output will print the newly created API gateway endpoint. test the function by calling the API endpoint. Something like this,</p>
<pre><code>Service Information
service: serverless-nodejs-api
stage: dev
region: us-east-1
stack: serverless-nodejs-api-dev
resources: 9
api keys:
  None
endpoints:
  GET - https://xxxxx.execute-api.us-east-1.amazonaws.com/dev
functions:
  api: serverless-nodejs-api-dev-getMsg
layers:
  None
</code></pre><p>test the function by calling the API endpoint.</p>
<pre><code>curl https://xxxxx.execute-api.us-east-1.amazonaws.com/dev

{
  &quot;message&quot;: &quot;Go Serverless v1.0! Your function executed successfully!&quot;
}
</code></pre><p><em><strong>Now let&rsquo;s automate the deployment process with Github, AWS Codepipeline</strong></em></p>
<p>Let&rsquo;s consider this code as production-ready and push the code to the GitHub repo master branch.</p>
<p><em>PS: We can create multiple pipelines per brach for eg: Master -&gt; Prod, Development -&gt; Staging/Dev Environment</em></p>
<h2 id="3-setup-codepipeline">3. Setup Codepipeline</h2>
<h4 id="31-set-pipeline-name-and-create-iam-role">3.1 Set Pipeline name and Create IAM Role</h4>
<h1 id="httpsiimgurcom0g7lgp6jpg"><img src="https://i.imgur.com/0G7LGP6.jpg" alt=""></h1>
<h4 id="32-add-source-stage">3.2 Add source stage</h4>
<p>In this stage, Connect to your Github account and choose your repo and branch
Set the detection method</p>
<p><img src="https://i.imgur.com/d5R9UOA.jpg" alt=""></p>
<h4 id="33-add-build-stage">3.3 Add build stage</h4>
<p>In this step, we have to create a Codebuild project, where we configure our build and deploy environment and commands.</p>
<p>Click on the <strong>Create Project</strong> button, it will take you to the Codebuild setup page.</p>
<p><img src="https://i.imgur.com/881kqAW.jpg" alt=""></p>
<p><em>Set the project name here</em></p>
<p><img src="https://i.imgur.com/DalIjHD.jpg" alt=""></p>
<p><em>Choose your runtime and image for the build environment</em></p>
<p><em>Choose an IAM role for the project</em> - <strong>This part is important</strong></p>
<p><strong>This role must have enough permissions for the serverless framework to deploy the function and its resources to AWS as follows,</strong></p>
<ul>
<li>Create an S3 bucket for your function deployments</li>
<li>Upload your function zip files to that S3 bucket</li>
<li>Submit a CloudFormation template</li>
<li>Create the log groups for your Lambda functions</li>
<li>Create a REST API in API Gateway</li>
</ul>
<p><em>You can use the below awesome NPM modules to create a narrow IAM policy template that will cover many Serverless use cases.</em></p>
<p><code>npm install -g yo generator-serverless-policy</code></p>
<p>then on your serverless app directory</p>
<pre><code>$ yo serverless-policy
? Your Serverless service name test-service
? You can specify a specific stage, if you like: dev
? You can specify a specific region, if you like: us-west-1
? Does your service rely on DynamoDB? Yes
? Is your service going to be using S3 buckets? Yes
app name test-service
app stage dev
app region us-west-1
Writing to test-service-dev-us-west-1-policy.json
</code></pre><p><em><strong>After you finish creating the codebuild project go to its IAM role and append the policy with the rules created by the above template.</strong></em></p>
<p>You can find the IAM policy we used for this guide here,
<a href="https://github.com/imewish/serverless-nodejs-api/blob/master/codebuild-IAM-policy.json">https://github.com/imewish/serverless-nodejs-api/blob/master/codebuild-IAM-policy.json</a></p>
<p><img src="https://i.imgur.com/RKn6C9O.jpg" alt="">
<img src="https://i.imgur.com/tfJdYRF.jpg" alt=""></p>
<p><em>Define Build Spec.</em></p>
<p>You can find it here. <a href="https://github.com/imewish/serverless-nodejs-api/blob/master/buildspec.yml">https://github.com/imewish/serverless-nodejs-api/blob/master/buildspec.yml</a></p>
<blockquote>
<p>Here we will define the commands to set up the serverless framework and deploy commands to AWS.</p>
<p>On install phase</p>
<ul>
<li>
<p>Set nodejs 10 as runtime</p>
</li>
<li>
<p>Install serverless framework
On Build Phase</p>
</li>
<li>
<p>Install npm packages</p>
</li>
<li>
<p>Deploy to lambda with <code>sls deploy --stage dev/prod</code></p>
</li>
</ul>
</blockquote>
<p>NB: You can also run your tests here if you have test cases written for your lambda functions.</p>
<p><img src="https://i.imgur.com/hORjMoL.jpg" alt=""></p>
<p><img src="https://i.imgur.com/FrOlrri.jpg" alt=""></p>
<p>Enable Cloudwatch logs so that we can tail our build process logs.</p>
<p>Then click on <strong>Continue to Codepipeline</strong> this will take us back to Codepipeline Setup.</p>
<h4 id="4-deploy-stage">4. Deploy Stage</h4>
<p>This stage is optional.</p>
<p>Since the serverless framework already put the deployment artifacts to an S3 bucket we can skip this part. But if you want to store it to a different bucket you can set up like this.</p>
<p><img src="https://i.imgur.com/2qmHBAX.jpg" alt=""></p>
<p>Click Next and then review all the setup then Create the pipeline.</p>
<p>That&rsquo;s it!. Now you can test this by going to the newly created pipeline and click on <em><strong>Release Change</strong></em></p>
<p><img src="https://i.imgur.com/lQW9adE.jpg" alt="">
<img src="https://i.imgur.com/8rE0W6o.jpg" alt=""></p>
]]></content>
		</item>
		
	</channel>
</rss>
